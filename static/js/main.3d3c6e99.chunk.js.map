{"version":3,"sources":["components/About.js","components/LoadingSpinner.js","utils/GetCharacterPhotoUrl.js","components/QuoteContainer.js","components/Home.js","utils/GetRandomQuote.js","menu.svg","components/Navbar.js","utils/GetQuoteByCharacterName.js","utils/GetQuoteByAnimeName.js","components/Search.js","App.js","index.js"],"names":["About","className","href","Spinner","fullScreen","characterName","a","replace","query","fetch","method","headers","body","JSON","stringify","then","response","json","QuoteContainer","props","quote","character","anime","useQuery","getCharacterPhotoUrl","data","isLoading","photo","Page","characters","find","item","media","nodes","title","english","match","image","large","src","alt","Home","useState","setQuote","setIsLoading","error","setError","getQuote","catch","message","useEffect","onClick","StyledLink","to","children","Navbar","menuRef","createRef","menuStateChange","current","classList","toggle","menu","ref","GetQuoteByCharacterName","page","GetQuoteByAnimeName","animeName","Search","searchValue","setSearchValue","quotes","setQuotes","option","setOption","setPage","getQuotes","onSubmit","event","preventDefault","value","onChange","e","target","type","autoFocus","placeholder","map","index","length","App","basename","exact","path","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.3d3c6e99.chunk.js","sourcesContent":["export default function About() {\r\n    return (\r\n        <div className=\"container mx-auto p-5\">\r\n            <h1 className=\"text-4xl text-center\">About page</h1>\r\n            <p className=\"text-center mt-3 text-xl\">\r\n                Anime quotes is website where you can find quotes said by your favourite anime character. To get quotes I'm using\r\n                <a href=\"https://animechan.vercel.app\" className=\"text-purple-500 font-semibold\"> Anime chan API </a>\r\n                and to get characters picture \r\n                <a href=\"https://anilist.gitbook.io/anilist-apiv2-docs/\" className=\"text-purple-500 font-semibold\"> Anilist GraphQL API</a>\r\n            </p>\r\n        </div>\r\n    )\r\n}","export default function Spinner({fullScreen}) {\r\n    return(\r\n        fullScreen ? \r\n        <div className=\"w-screen h-screen absolute left-0 top-0 flex justify-center items-center\">\r\n            <div className=\"relative animate-spin w-16 h-16 border-8 border-blue-500 rounded-full\">\r\n                <div className=\"absolute top-0 left-1/2 transform -translate-y-full -translate-x-1/2 w-2 h-2 bg-white\"/>\r\n            </div>\r\n        </div>\r\n        :\r\n        <div className=\"relative animate-spin w-16 h-16 border-8 border-blue-400 rounded-full\">\r\n            <div className=\"absolute top-0 left-1/2 transform -translate-y-full -translate-x-1/2 w-2 h-2 bg-white\"/>\r\n        </div>\r\n    )\r\n}","export default async function getCharacterPhotoUrl(characterName) {\r\n    characterName = characterName.replace(/Å«/g,\"uu\");\r\n\r\n    const query = `\r\n    query{\r\n        Page(page: 1) {\r\n            characters(search: \"${characterName}\") {\r\n                image {\r\n                    large\r\n                }\r\n                media {\r\n                    nodes {\r\n                        title {\r\n                            english\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    `;\r\n\r\n    return await fetch(`https://graphql.anilist.co`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            query\r\n        })\r\n    })\r\n    .then(response => response.json())\r\n}","import { useQuery } from \"react-query\";\r\nimport getCharacterPhotoUrl from \"../utils/GetCharacterPhotoUrl\";\r\nimport Spinner from \"./LoadingSpinner\";\r\n\r\nexport default function QuoteContainer(props) {\r\n    const { character, anime, quote } = props.quote;\r\n    const { data, isLoading } = useQuery(`getImage-${character}`, () => getCharacterPhotoUrl(character, anime));\r\n    let photo = null;\r\n\r\n    if(data?.data) {\r\n        photo = data.data.Page.characters.find((item) => item.media.nodes.find((title) => title.title?.english?.match(anime)))?.image.large\r\n    }\r\n\r\n    return (\r\n        <div className=\"mx-auto w-full xl:w-96 p-5 bg-blue-500 flex flex-col justify-between\">\r\n            <div>\r\n                {isLoading ? \r\n                <div className=\"relative w-20 h-96 mx-auto flex items-center\">\r\n                    <Spinner/>\r\n                </div>\r\n                :\r\n                    photo ? \r\n                    <img src={photo} className=\"mx-auto\" alt=\"character\"/>\r\n                    :\r\n                    <p className=\"text-center\">Couldn't find the photo</p>\r\n                }\r\n                <p className=\"mt-4 text-2xl italic\">\"{quote}\"</p>\r\n            </div>\r\n            <div>\r\n                <p className=\"mt-2 text-lg\">{character}</p>\r\n                <p className=\"text-sm\">{anime}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport GetRandomQuote from \"../utils/GetRandomQuote\";\r\nimport Spinner from \"./LoadingSpinner\";\r\nimport QuoteContainer from \"./QuoteContainer\";\r\n\r\nexport default function Home(){\r\n    const [quote, setQuote] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    \r\n    const getQuote = async () => {\r\n        setIsLoading(true);\r\n        try{\r\n            let data = await GetRandomQuote();\r\n            if(data.error) {\r\n                if(data.error.message)\r\n                {\r\n                    setError(data.error.message);\r\n                }\r\n                else{\r\n                    setError(data.error);\r\n                }\r\n            }\r\n            else{\r\n                setQuote(data);\r\n            }  \r\n        }\r\n        catch(err){\r\n            setError(err);\r\n        }\r\n        finally{\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getQuote();\r\n    },[])\r\n    return (\r\n        <div className=\"container mx-auto p-5\">\r\n            <h1 className=\"text-4xl text-center\">Random anime quotes</h1>\r\n            {isLoading ? <Spinner fullScreen/> : \r\n            error ? <p className=\"text-center text-2xl text-red-600\">{error}</p> : \r\n                <div className=\"mx-auto mt-8 flex flex-col justify-center\">\r\n                    <QuoteContainer quote={quote} />\r\n                    <button className=\"mx-auto px-10 py-3 bg-blue-500 hover:bg-blue-600 mt-8\" onClick={getQuote}>Get new random quote</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","export default function GetRandomQuote() {\r\n    return fetch('https://animechan.vercel.app/api/random')\r\n    .then(response => response.json())\r\n    .catch((error)=>({error}))\r\n}","export default __webpack_public_path__ + \"static/media/menu.f8235882.svg\";","import { createRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport menu from '../menu.svg'\r\n\r\nfunction StyledLink({ to, children, onClick }){\r\n    return (\r\n        <Link to={to} onClick={onClick} className=\" w-full text-center md:w-max px-4 py-1 md:bg-blue-700 hover:bg-blue-600 md:rounded-full text-lg\">{children}</Link>\r\n    )\r\n}\r\n\r\nexport default function Navbar(){\r\n    const menuRef = createRef();\r\n    const menuStateChange = () =>{\r\n        menuRef.current.classList.toggle('left-full');\r\n        menuRef.current.classList.toggle('left-0');\r\n    }\r\n    return (\r\n        <nav className=\"w-full h-14 border-b-2 border-gray-400 px-4 flex justify-between items-center sticky\">\r\n            <p className=\"text-2xl font-semibold italic\">Anime quotes</p>\r\n            <button className=\"md:hidden\" onClick={menuStateChange}>\r\n                <img src={menu} alt=\"menu\"/>\r\n            </button>\r\n            <div ref={menuRef} className=\"fixed top-0 left-full w-screen h-screen transition-all duration-700 bg-blue-900 md:bg-transparent md:w-auto md:h-auto md:static flex flex-col items-center gap-2 md:flex-row md:gap-5\">\r\n                <button className=\"text-3xl self-end mr-10 md:hidden\" onClick={menuStateChange}>x</button>\r\n                <StyledLink to=\"/\" onClick={menuStateChange}>Home</StyledLink>\r\n                <StyledLink to=\"/search\" onClick={menuStateChange}>Search</StyledLink>\r\n                <StyledLink to=\"/about\" onClick={menuStateChange}>About</StyledLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","export default async function GetQuoteByCharacterName(characterName, page){\r\n    return await fetch(`https://animechan.vercel.app/api/quotes/character?name=${characterName}&page=${page}`)\r\n    .then(response => response.json())\r\n    .catch((error)=>({error}))\r\n}","export default async function GetQuoteByAnimeName(animeName, page) {\r\n    return await fetch(`https://animechan.vercel.app/api/quotes/anime?title=${animeName}&page=${page}`)\r\n    .then(response => response.json())\r\n    .catch((error)=>({error}))\r\n}","import { useEffect, useState } from \"react\"\r\nimport GetQuoteByCharacterName from '../utils/GetQuoteByCharacterName'\r\nimport GetQuoteByAnimeName from '../utils/GetQuoteByAnimeName'\r\nimport Spinner from \"./LoadingSpinner\";\r\nimport QuoteContainer from \"./QuoteContainer\";\r\n\r\nexport default function Search() {\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [quotes, setQuotes] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [option, setOption] = useState('character');\r\n    const [page, setPage] = useState(1);\r\n    \r\n    const getQuotes = async () => {\r\n        if(searchValue)\r\n        {\r\n            setError(null);\r\n            setIsLoading(true);\r\n            try{\r\n                let data;\r\n                if(option === 'character'){\r\n                    data = await GetQuoteByCharacterName(searchValue, page);\r\n                }\r\n                else{\r\n                    data = await GetQuoteByAnimeName(searchValue, page);\r\n                }\r\n                if(data.error)\r\n                {\r\n                    if(data.error.message)\r\n                    {\r\n                        setError(data.error.message);\r\n                    }\r\n                    else{\r\n                        setError(data.error);\r\n                    }\r\n                }\r\n                else{\r\n                    setQuotes(data);\r\n                }\r\n            }\r\n            catch(err){\r\n                setError(err);\r\n            }\r\n            finally{\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        if(page !== 1){\r\n            setPage(1);\r\n        }\r\n        else{\r\n            getQuotes();\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        getQuotes();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[page])\r\n    return (\r\n        <div className=\"container mx-auto p-5\">\r\n            <h1 className=\"text-4xl text-center\">Search quote</h1>\r\n            <form onSubmit={handleSubmit} className=\"flex flex-col md:flex-row w-full mx-auto mt-4 justify-center gap-5\">\r\n                <select className=\"bg-blue-700 py-1 px-2 outline-none\" value={option} onChange={(e)=>setOption(e.target.value)}>\r\n                    <option value=\"character\">Character</option>\r\n                    <option value=\"anime\">Anime</option>\r\n                </select>\r\n                <input type=\"text\" autoFocus className=\"outline-none bg-blue-700 px-2 py-1 w-full md:w-1/2 rounded\" placeholder={`Search by ${option} name...`} value={searchValue} onChange={e=>{setSearchValue(e.target.value)}}/>\r\n                <input type=\"submit\" value=\"Search\" className=\"mx-auto md:mx-0 w-max bg-blue-700 px-10 py-1 hover:bg-blue-600 cursor-pointer rounded\"/>\r\n            </form>\r\n            {isLoading ? \r\n            <Spinner fullScreen/> : \r\n                error ? <p className=\"text-center text-2xl text-red-600 mt-2\">{error}</p> :\r\n                <>\r\n                    <div className=\"lg:grid lg:grid-cols-3 flex flex-col gap-12 justify-center mt-8\">\r\n                        {quotes.map((quote, index)=>{\r\n                            return <QuoteContainer quote={quote} key={index}/>\r\n                        })}\r\n                    </div>\r\n                    <div className=\"mx-auto w-max mt-12 flex flex-col gap-6 md:flex-row md:gap-12\">\r\n                        {page > 1 &&  <button className=\"mx-auto w-44 py-3 bg-blue-500 hover:bg-blue-600\" onClick={()=>{setPage(page => page - 1)}}>Previous page</button>}\r\n                        {quotes.length === 10 && <button className=\"mx-auto w-44 py-3 bg-blue-500 hover:bg-blue-600\" onClick={()=>setPage(page => page + 1)}>Next page</button>}\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}","import { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport About from \"./components/About\";\r\nimport Home from \"./components/Home\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Search from \"./components/Search\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <div className=\"min-h-screen w-full bg-blue-900 text-white\">\r\n            <HashRouter basename=\"/\">\r\n                <Navbar/>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Home/>\r\n                    </Route>\r\n                    <Route path=\"/about\">\r\n                        <About/>\r\n                    </Route>\r\n                    <Route path=\"/search\">\r\n                        <Search/>\r\n                    </Route>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport App from './App';\nimport './index.css'\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}